package com.philemonworks.selfdiagnose.report;

import com.philemonworks.selfdiagnose.*;
import com.philemonworks.selfdiagnose.check.CheckProperty;
import com.philemonworks.selfdiagnose.check.CheckResourceProperty;
import com.philemonworks.selfdiagnose.report.util.MavenPomPropertiesUtil;
import com.philemonworks.selfdiagnose.report.util.exception.ErrorMessageException;
import com.philemonworks.selfdiagnose.report.util.exception.FailedMessageException;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

/**
 * ReportMavenPOMProperties is a task that reports the Maven build properties
 * which are included in the application if it is build using Maven.
 * Usage:
 * <pre>
 * &lt;reportmavenpomproperties
 *  comment="Maven POM properties"
 *  name="/META-INF/maven/com.yours.appp/myapp/pom.properties"
 * /&gt;
 * </pre>
 *
 * @author ernestmicklei
 */
public class ReportMavenPOMProperties extends CheckResourceProperty {
    private static final long serialVersionUID = -1621931990560851769L;

    public ReportMavenPOMProperties() {
        setSeverity(Severity.NONE);
    }

    public String getDescription() {
        return "Reports on the pom.properties generated by Maven";
    }

    public void setUp(ExecutionContext ctx) throws DiagnoseException {
        if (name == null)
            DiagnoseUtil.verifyNonEmptyString(PARAMETER_URL, url, CheckProperty.class);
    }

    public void run(ExecutionContext ctx, DiagnosticTaskResult result) throws DiagnoseException {
        String version = null;
        String buildtime = null;

        Properties properties;
        try {
            properties = MavenPomPropertiesUtil.readMavenPomPropertiesFile(ctx, this.getName());
            version = properties.getProperty("version");
            buildtime = properties.getProperty("buildtime");
        } catch (FailedMessageException e) {
            result.setFailedMessage(e.getMessage());
        } catch (ErrorMessageException e) {
            result.setErrorMessage(e.getMessage());
        }

        if (version == null || version.length() == 0) {
            version = "unknown";
        }
        if (buildtime == null || version.length() == 0) {
            buildtime = "an unknown time";
        }
        result.setPassedMessage("Version=" + version + " build=" + buildtime + " from [" + getName() + "]");
    }

}
